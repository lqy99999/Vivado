/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xspi.h"
#include "sleep.h"


static XSpi TempSensor;
static XSpi_Config *ConfigPtr;

typedef uint8_t DataBuffer[2];
DataBuffer rBuffer;
DataBuffer wBuffer;


void SpiInitialize(uint32_t Spi_Device_ID, uint32_t SlaveMask)
{
    uint8_t StatusReport = 0;

    StatusReport = XSpi_Initialize(&TempSensor, Spi_Device_ID);//DeviceId is the unique id of the device controlled by this XSpi instance.

    print("Initialize: ");
    switch(StatusReport)
    {
       case XST_SUCCESS             : print("XST_SUCCESS\n\r");break;
       case XST_DEVICE_IS_STOPPED   : print("XST_DEVICE_IS_STOPPED\n\r");break;
       case XST_DEVICE_NOT_FOUND    : print("XST_DEVICE_NOT_FOUND\n\r" );break;
       default                      : print("DEFAULT VALUE\n\r" );break;
    }

    XSpi_SetOptions(&TempSensor, XSP_MASTER_OPTION | XSP_MANUAL_SSELECT_OPTION);//1 means to turn the option on, and a 0 means to turn the option off.

    XSpi_Start(&TempSensor);
    XSpi_IntrGlobalDisable(&TempSensor);//disable interrupts
    XSpi_SetSlaveSelect(&TempSensor, SlaveMask);//sets the slave which will be selected when a transfer occurs. The slave is not selected when the SPI is idle.

}

void SpiSingleWrite(uint16_t address, uint8_t value)
{
	uint16_t report = 0;
    uint8_t InstructionFormat     = 0x0A;

    uint8_t WriteBuffer[3]        = {InstructionFormat,address,value};

//    request data
//    XST_SUCCESS: successfully
//    XST_DEVICE_IS_STOPPED: started before transferring data.
//    XST_DEVICE_BUSY: a data transfer is already
//    XST_SPI_NO_SLAVE: the device is configured as a master and a slave has not yet been selected.
    report = XSpi_Transfer(&TempSensor, WriteBuffer, NULL, sizeof(WriteBuffer));

    print("Write: ");
    switch(report)
    {
       case XST_SUCCESS             : print("XST_SUCCESS\n\r");break;
       case XST_DEVICE_IS_STOPPED   : print("XST_DEVICE_IS_STOPPED\n\r");break;
       case XST_DEVICE_BUSY         : print( "XST_DEVICE_BUSY\n\r" );break;
       case XST_SPI_NO_SLAVE        : print( "XST_SPI_NO_SLAVE\n\r" );break;
       default                      : print( "DEFAULT VALUE\n\r" );break;
    }
}

uint8_t* Spi_Read(uint16_t address)
{
	uint16_t report = 0;
    uint8_t InstructionFormat     = 0x0B;

    wBuffer        = {InstructionFormat,address};

//    request data
//    XST_SUCCESS: successfully
//    XST_DEVICE_IS_STOPPED: started before transferring data.
//    XST_DEVICE_BUSY: a data transfer is already
//    XST_SPI_NO_SLAVE: the device is configured as a master and a slave has not yet been selected.
    report = XSpi_Transfer(&TempSensor, WriteBuffer, ReadBuffer, sizeof(WriteBuffer));

    print("Read: ");
    switch(report)
    {
       case XST_SUCCESS             : print("XST_SUCCESS\n\r");break;
       case XST_DEVICE_IS_STOPPED   : print("XST_DEVICE_IS_STOPPED\n\r");break;
       case XST_DEVICE_BUSY         : print( "XST_DEVICE_BUSY\n\r" );break;
       case XST_SPI_NO_SLAVE        : print( "XST_SPI_NO_SLAVE\n\r" );break;
       default                      : print( "DEFAULT VALUE\n\r" );break;
    }

    return rBuffer;
}

int Spi_ConfTest(u16 DeviceId){
	int Status;

	ConfigPtr = XSpi_LookupConfig(DeviceId);
	if (ConfigPtr == NULL) return XST_DEVICE_NOT_FOUND;

	Status = XSpi_CfgInitialize(&TempSensor, ConfigPtr, ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) return XST_FAILURE;

	Status = XSpi_SelfTest(&TempSensor);
	if (Status != XST_SUCCESS) {
		print("The self test failed\n\r");
		return XST_FAILURE;
	}

	print("Self test success\n\r");

	return XST_SUCCESS;
}


int main()
{
    init_platform();

    print("-----CONFIG TEST-----\n\r");
    int Status = Spi_ConfTest(XPAR_SPI_0_DEVICE_ID);
    if (Status != XST_SUCCESS)	return XST_FAILURE;

    print("-----START-----\n\r");
    SpiInitialize(XPAR_SPI_0_DEVICE_ID, 0);

    print("-----START-UP ROUTINE-----\n\r");
    //Start-up Routine
    //1
    SpiSingleWrite(0x20, 0xFA);
    usleep(10); // useconds
    SpiSingleWrite(0x21, 0x00);
    usleep(10);
    //2
    SpiSingleWrite(0x23, 0x96);
    usleep(10);
    SpiSingleWrite(0x24, 0x00);
	usleep(10);
	//3
	SpiSingleWrite(0x25, 0x1E);
	usleep(10);
	//4
	SpiSingleWrite(0x27, 0x3F);
	usleep(10);
	//5
	SpiSingleWrite(0x2B, 0x40);
	usleep(10);
	//6
	SpiSingleWrite(0x2D, 0x0A);
	usleep(10);

	print("-----RECEIVE DATA-----\n\r");
	uint8_t data = 0;

	//Status
	data = Spi_Read(0x0B);
	xil_printf("Status: %x\n\r", data);
	usleep(10);

	//X DATA
//	while(1){
		data = Spi_Read(0x0B);
		xil_printf("XDATA: %x\n\r", data);
		usleep(10);
//	}


	print("-----END-----\n\r");
    cleanup_platform();
    return 0;
}
